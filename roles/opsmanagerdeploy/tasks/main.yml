---
#Author: Saed Alavinia 
#Email: saedalav@gmail.com 
#Github: github.com/saedalav 


# Gather FActs on the output of the Cloudformation Stack named "{{StackName}}"
- name: Gathering Facts About Cloud Formation Stack
  cloudformation_facts:
    stack_name: '{{StackName}}'
    region: "{{Region}}"
    all_facts: false
  register: stack_facts

- name: Extract Cloud formation Output Dictionary 
  set_fact:
    Outputs: "{{stack_facts.ansible_facts.cloudformation[StackName]['stack_outputs']}}"

- name: Extract variables from Cloud Formation Output Dictionary
  set_fact:
    PcfPublicSubnetAvailabilityZone: "{{Outputs['PcfPublicSubnetAvailabilityZone']}}"
    PcfPrivateSubnetAvailabilityZone: "{{Outputs['PcfPrivateSubnetAvailabilityZone']}}"
    PcfPrivateSubnet2AvailabilityZone: "{{Outputs['PcfPrivateSubnet2AvailabilityZone']}}"
    PcfElasticRuntimeS3DropletsBucket: "{{Outputs['PcfElasticRuntimeS3DropletsBucket']}}"
    PcfElbSshDnsName: "{{Outputs['PcfElbSshDnsName']}}"
    PcfVmsSecurityGroupId: "{{Outputs['PcfVmsSecurityGroupId']}}"
    PcfElasticRuntimeS3BuildpacksBucket: "{{Outputs['PcfElasticRuntimeS3BuildpacksBucket']}}"
    PcfVpc: "{{Outputs['PcfVpc']}}"
    PcfPublicSubnetId: "{{Outputs['PcfPublicSubnetId']}}"
    PcfRdsPassword: "{{Outputs['PcfRdsPassword']}}"
    PcfIamUserName: "{{Outputs['PcfIamUserName']}}"
    PcfPrivateSubnet2Id: "{{Outputs['PcfPrivateSubnet2Id']}}"
    PcfRdsDBName: "{{Outputs['PcfRdsDBName']}}"
    PcfOpsManagerS3Bucket: "{{Outputs['PcfOpsManagerS3Bucket']}}"
    PcfPublicSubnetId2: "{{Outputs['PcfPublicSubnetId2']}}"
    PcfElasticRuntimeS3PackagesBucket: "{{Outputs['PcfElasticRuntimeS3PackagesBucket']}}"
    PcfIamUserSecretAccessKey: "{{Outputs['PcfIamUserSecretAccessKey']}}"
    PcfIamUserAccessKey: "{{Outputs['PcfIamUserAccessKey']}}"
    PcfRdsPort: "{{Outputs['PcfRdsPort']}}"
    PcfRdsUsername: "{{Outputs['PcfRdsUsername']}}"
    PcfElbDnsName: "{{Outputs['PcfElbDnsName']}}"
    PcfPrivateSubnetId: "{{Outputs['PcfPrivateSubnetId']}}"
    PcfElasticRuntimeS3ResourcesBucket: "{{Outputs['PcfElasticRuntimeS3ResourcesBucket']}}"
    PcfRdsAddress: "{{Outputs['PcfRdsAddress']}}"
    PcfElbTcpDnsName: "{{Outputs['PcfElbTcpDnsName']}}"
    PcfOpsManagerSecurityGroupId: "{{Outputs['PcfOpsManagerSecurityGroupId']}}"
    PcfPublicSubnetAvailabilityZone2: "{{Outputs['PcfPublicSubnetAvailabilityZone2']}}"


- name: Launch an EC2 Instance from an Ops Manager AMI
  ec2:
    key_name: "{{NATKeyPair}}"
    region: "{{Region}}"
    instance_type: "{{OpsManInstanceType}}" 
    wait: yes
    image: "{{AMIID}}"
    count: 1
    vpc_subnet_id: "{{PcfPublicSubnetId}}"
    assign_public_ip: yes
    group_id: "{{ PcfOpsManagerSecurityGroupId }}"
    volumes:
      - device_name: /dev/sdb
        volume_size: 100
        delete_on_termination: true
    instance_tags:
      Name: Ops Manager
  register: ec2


- name: Add new instance to host group
  add_host:
    hostname: "{{ item.public_ip }}"
    groupname: launched
  with_items: "{{ ec2.instances }}"

- name: Wait for SSH to come up
  wait_for:
    host: "{{ item.public_dns_name }}"
    port: 22
    delay: 60
    timeout: 320
  with_items: "{{ ec2.instances }}"

- name: Add a route53 record
  route53:
    command: create
    zone: "{{Route53Zone}}"
    record: "{{Route53Record}}"
    type: "{{Route53Type}}"
    ttl: 60
    value: "{{ item.public_ip }}"
    wait: yes
  with_items: "{{ ec2.instances }}"


- name: configure Ops Manager Security
  uri:
    url: "https://{{Route53Record}}/api/v0/setup"
    return_content: yes
    method: POST
    validate_certs: no
    headers:
      Content-Type: "application/json" 
    body: 
      setup: 
        decryption_passphrase: "{{DecryptionPassphrase}}"
        decryption_passphrase_confirmation: "{{DecryptionPassphrase}}"
        eula_accepted: "true"
        identity_provider: "internal"
        admin_user_name: "{{AdminUserName}}"
        admin_password: "{{AdminPassword}}"
        admin_password_confirmation: "{{AdminPassword}}"
    body_format: json
  retries: 3
  delay: 60
  register: result
  until: result|succeeded
  ignore_errors: yes

- name: Report Error or Ignore if Successful
  fail:
    msg: 'Unable to download {{result.url}} {{result.response|default(result.msg)}}'
  when: not result|succeeded

- name: Pause so that Ops Manager Authentication Starts 
  pause:
    minutes: 2
    prompt: "Waiting for Ops Manager Authentication to Start"

